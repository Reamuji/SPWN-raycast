extract obj_props
extract $
gs = import gamescene

display_block =  955
collision_block = 1816

// specific groups used 
origin = ?g
coltrig = 2g
ray_array = 1g
ray_rotate = ?g
targ = ?g
wall = 1b

// counter for user input
ls = counter(0)
rs = counter(0)

//info for collision of player block
player = [
    // top
    [?b, 0, 2],
    // right
    [?b, 2, 0],
    // bottom
    [?b, 0, -2],
    //left
    [?b, -2, 0],
]

// display specs
height = 190
origy = 375
origx = 400

// ray array specs
viewdist = 20
width = 30

//declaring the array which stores [ray collision block, 
                                // group for display blocks,
                                // display block color]
let ray_pairs = []

//each index represents the rays at a certain distance
let color = []

//setup function to draw display and raycasting collision blocks
setup = (width, distance){
    // create rays
    // height increment between display slices
    inc = (height-100) / distance
    // goal-height, the height that the sections should reach
    let gh = height
    // adds obj in distance that rays target
    add(obj {
        OBJ_ID: display_block,
        X: 1200,
        Y: 1200 + 9999,
        SCALING: 0.25,
        GROUPS: [ray_rotate, targ],        
    })
    // player block / origin of rays
    add(obj {
        OBJ_ID: display_block,
        X: 1200,
        Y: 1200,
        SCALING: 0.5,
        GROUPS: [ray_rotate, origin],        
    })
    // adds the player collision blocks
    for i in 0..player.length {
        add(obj {
            OBJ_ID: collision_block,
            X: 1200 + player[i][1],
            Y: 1200 + player[i][2],
            GROUPS: ray_array,
            SCALING: 0.5,
            BLOCK_A: player[i][0],
            DYNAMIC_BLOCK: true,
        })
    }
    // adds color for each index
    for i in 0..distance {
        let ray_color = []
        ghh = height - i*inc
        for j in 0..floor(ghh/15)*2 {
            color_temp = ?c
            color_temp.set(rgb8(255 - (distance/3)*(i*2), 255 - (distance/3)*(i*2), 255 - (distance/3)*(i*2)))
            ray_color.push(color_temp)
        }
        color.push(ray_color)
    }
    //loops from width left to right
    for i in -width/2..width/2 {
        // var below stores all info for a given ray and pushes that info to ray_pairs later
        let ray = []
        // loops through the distance and creates rays and display at each distance
        for j in 1..distance+1 {
            //allocates the following variables to store ray and display info
            group = ?g
            block = ?b
            pair = [block, group]
            group.toggle_off()        
            // adds collision blocks to make up rays
            add(obj {
                OBJ_ID: collision_block,
                X: 1200 + (i*40) * (j/40),
                Y: 1200 + j*(distance + 2),
                SCALING: j/40,
                GROUPS: [ray_array, ray_rotate],
                BLOCK_A: block,
                DYNAMIC_BLOCK: true,
            })
            // loops through top of height and adds blocks to make display
            for k in 0..floor(gh/15) {
                add(obj {
                    OBJ_ID: display_block,
                    X: origx + i*15,
                    Y: origy + (height/2 + gh - 50)-k*15,
                    GROUPS: group,
                    SCALING: 0.5,
                    COLOR: color[j-1][k+floor(gh/15)],
                    Z_ORDER: distance - j
                })
            }
            // adds gradient ceiling
            add(obj {
                OBJ_ID: display_block,
                X: origx + i*15,
                Y: origy + (height/2 + gh - 50),
                GROUPS: 25g,
                SCALING: 0.5,
                COLOR: color[j-1][0],
                Z_ORDER: distance - j
            })
            // loops through bottom of height and adds display blocks
            for k in 0..floor(gh/15) {
                add(obj {
                    OBJ_ID: display_block,
                    X: origx + i*15,
                    Y: origy + (height/2 - gh + 50) + k*15,
                    GROUPS: group,
                    SCALING: 0.5,
                    COLOR: color[j-1][k+floor(gh/15)],
                    Z_ORDER: distance - j
                })
            }
            // adds gradient floor
            add(obj {
                OBJ_ID: display_block,
                X: origx + i*15,
                Y: origy + (height/2 - gh + 50),
                GROUPS: 25g,
                SCALING: 0.5,
                COLOR: color[j-1][0],
                Z_ORDER: distance - j
            })
            // sets the goal height for the next ray section
            gh -= inc
            ray.push(pair)
        }
        ray_pairs.push(ray)
        // resets goal height for the next ray
        gh = height
    }
}

// calls setup to generate an array of rays and display blocks for the specified width and distance
setup(width, viewdist)

// test for collision
for i in 0..ray_pairs.length {
    for j in 0..ray_pairs[i].length {
        // adds collision object to test for when a ray section enters wall block
        add(obj {
            OBJ_ID: 1815,
            X: i*60 + 100000,
            Y: j*60,
            BLOCK_A: ray_pairs[i][j][0],
            BLOCK_B: wall,
            TARGET: ray_pairs[i][j][1],
            ACTIVATE_GROUP: true,
            ACTIVATE_ON_EXIT: false,
            SPAWN_TRIGGERED: true,
            GROUPS: coltrig
        })
        // adds collision object to test for when a ray section exits wall block
        add(obj {
            OBJ_ID: 1815,
            X: i*60 - 30 + 100000,
            Y: j*60,
            BLOCK_A: ray_pairs[i][j][0],
            BLOCK_B: wall,
            TARGET: ray_pairs[i][j][1],
            ACTIVATE_GROUP: false,
            ACTIVATE_ON_EXIT: true,
            SPAWN_TRIGGERED: true,
            GROUPS: coltrig
        })
    }
}
// activate triggers
triggers = !{
    coltrig!
    for i in 0..ray_pairs.length {
        for j in 0..ray_pairs[i].length {
            ray_pairs[i][j][1].lock_to_player(true, false)
        }
    }
    25g.lock_to_player(true, false)
}

// specifies when display should start following player
call_with_delay((origx/30)/10.4 - 0.3, triggers)

// controls right rotation
right = !{
    -> ray_rotate.rotate(origin, 9999, 225)
}

// controls left rotation
left = !{
    -> ray_rotate.rotate(origin, -9999, 225)
}

// controls moving forward
move_forward = !{
    -> origin.move_to(targ, 175)
    -> ray_array.follow(origin)
    -> targ.follow(origin)
}

// controls all move commands
move = !{
    wait()
    rss = rs.to_const(0..2)
    lss = ls.to_const(0..2)

    // checks which buttons are pressed
    if rss == 1 && lss == 1 {
        left.start_group.stop()
        right.start_group.stop() 
        move_forward!
    } else if rss == 1 {
        move_forward.start_group.stop()
        left.start_group.stop()
        right!
    } else if lss == 1 {
        move_forward.start_group.stop()
        right.start_group.stop() 
        left!
    } else {
        move_forward.start_group.stop()
        right.start_group.stop() 
        left.start_group.stop()
    }
}
// general user input:
on(gs.button_a(), !{
    ls += 1
    move!
})
on(gs.button_a_end(), !{
    ls -= 1
    move!
})
on(gs.button_b(), !{
    rs += 1
    move!
})
on(gs.button_b_end(), !{
    rs -= 1
    move!
})

// adds player collision:
for i in 0..player.length {
    on(collision(player[i][0], 1b), !{
        move_forward.start_group.stop()
        ray_array.move(ceil(-player[i][1]), ceil(-player[i][2]))
    })
}
